export default AssociativeLine;
declare class AssociativeLine {
    constructor(opt?: {});
    mindMap: any;
    associativeLineDraw: any;
    isNotRenderAllLines: boolean;
    lineList: any[];
    activeLine: any[];
    isCreatingLine: boolean;
    creatingStartNode: any;
    creatingLine: any;
    overlapNode: any;
    isNodeDragging: boolean;
    controlLine1: any;
    controlLine2: any;
    controlPoint1: any;
    controlPoint2: any;
    controlPointDiameter: number;
    isControlPointMousedown: boolean;
    mousedownControlPointKey: string;
    controlPointMousemoveState: {
        pos: any;
        startPoint: any;
        endPoint: any;
        targetIndex: string;
    };
    checkOverlapNode(x: any, y: any): void;
    bindEvent(): void;
    renderAllLines(): void;
    onDrawClick(): void;
    onNodeClick(node: any): void;
    removeLine(): void;
    addLine(fromNode: any, toNode: any): void;
    onMousemove(e: any): void;
    onNodeDragging(): void;
    onNodeDragend(): void;
    onControlPointMouseup: any;
    onBeforeDestroy(): void;
    unBindEvent(): void;
    getStyleConfig(node: any, toNode: any): {};
    createMarker(callback?: () => void): any;
    updateAllLinesPos(node: any, toNode: any, associativeLinePoint: any): ({
        x: any;
        y: any;
        dir: string;
        range: number;
    } | {
        x: any;
        y: number;
        dir: "left";
    } | {
        x: any;
        y: number;
        dir: "right";
    } | {
        x: number;
        y: any;
        dir: "top";
    } | {
        x: number;
        y: any;
        dir: "bottom";
    })[];
    drawLine(startPoint: any, endPoint: any, node: any, toNode: any): void;
    updateActiveLineStyle(): void;
    setActiveLine({ path, clickPath, markerPath, text, node, toNode, startPoint, endPoint, controlPoints }: {
        path: any;
        clickPath: any;
        markerPath: any;
        text: any;
        node: any;
        toNode: any;
        startPoint: any;
        endPoint: any;
        controlPoints: any;
    }): void;
    removeAllLines(): void;
    createLineFromActiveNode(): void;
    createLine(fromNode: any): void;
    cancelCreateLine(): void;
    updateCreatingLine(e: any): void;
    getTransformedEventPos(e: any): {
        x: number;
        y: number;
    };
    getNodePos(node: any): {
        left: any;
        top: any;
        translateLeft: any;
        translateTop: any;
        width: any;
        height: any;
    };
    completeCreateLine(node: any): void;
    clearActiveLine(): void;
    front(): void;
    back(): void;
    beforePluginRemove(): void;
    beforePluginDestroy(): void;
}
declare namespace AssociativeLine {
    const instanceName: string;
}
