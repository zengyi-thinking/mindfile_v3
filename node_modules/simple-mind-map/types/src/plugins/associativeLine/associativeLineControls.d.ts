declare namespace _default {
    export { createControlNodes };
    export { createOneControlNode };
    export { onControlPointMousedown };
    export { onControlPointMousemove };
    export { onControlPointMouseup };
    export { resetControlPoint };
    export { renderControls };
    export { removeControls };
    export { hideControls };
    export { showControls };
    export { updataAassociativeLine };
}
export default _default;
declare function createControlNodes(node: any, toNode: any): void;
declare class createControlNodes {
    constructor(node: any, toNode: any);
    controlLine1: any;
    controlLine2: any;
    controlPoint1: any;
    controlPoint2: any;
}
declare function createOneControlNode(pointKey: any, node: any, toNode: any): any;
declare function onControlPointMousedown(e: any, pointKey: any): void;
declare class onControlPointMousedown {
    constructor(e: any, pointKey: any);
    isControlPointMousedown: boolean;
    mousedownControlPointKey: any;
}
declare function onControlPointMousemove(e: any): void;
declare function onControlPointMouseup(e: any): void;
declare class onControlPointMouseup {
    constructor(e: any);
    isNotRenderAllLines: boolean;
}
declare function resetControlPoint(): void;
declare class resetControlPoint {
    isControlPointMousedown: boolean;
    mousedownControlPointKey: string;
    controlPointMousemoveState: {
        pos: any;
        startPoint: any;
        endPoint: any;
        targetIndex: string;
    };
}
declare function renderControls(startPoint: any, endPoint: any, point1: any, point2: any, node: any, toNode: any): void;
declare function removeControls(): void;
declare class removeControls {
    controlLine1: any;
    controlLine2: any;
    controlPoint1: any;
    controlPoint2: any;
}
declare function hideControls(): void;
declare function showControls(): void;
declare function updataAassociativeLine(startPoint: any, endPoint: any, point1: any, point2: any, activeLine: any): void;
