export default Search;
declare class Search {
    constructor({ mindMap }: {
        mindMap: any;
    });
    mindMap: any;
    isSearching: boolean;
    searchText: string;
    matchNodeList: any[];
    currentIndex: number;
    notResetSearchText: boolean;
    isJumpNext: boolean;
    bindEvent(): void;
    onDataChange(): void;
    onModeChange(mode: any): void;
    unBindEvent(): void;
    search(text: any, callback?: () => void): void;
    updateMatchNodeList(list: any): void;
    endSearch(): void;
    doSearch(): void;
    isNodeInstance(node: any): boolean;
    searchNext(callback: any, index: any): void;
    clearHighlightOnReadonly(): void;
    jump(index: any, callback?: () => void): void;
    replace(replaceText: any, jumpNext?: boolean): void;
    replaceAll(replaceText: any): void;
    getReplacedText(node: any, searchText: any, replaceText: any): any;
    emitEvent(): void;
    beforePluginRemove(): void;
    beforePluginDestroy(): void;
}
declare namespace Search {
    const instanceName: string;
}
