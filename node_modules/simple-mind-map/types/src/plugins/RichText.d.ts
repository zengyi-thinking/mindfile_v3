export default RichText;
declare class RichText {
    constructor({ mindMap, pluginOpt }: {
        mindMap: any;
        pluginOpt: any;
    });
    mindMap: any;
    pluginOpt: any;
    textEditNode: HTMLDivElement;
    showTextEdit: boolean;
    quill: any;
    range: any;
    lastRange: any;
    pasteUseRange: any;
    node: any;
    isInserting: boolean;
    styleEl: HTMLStyleElement;
    cacheEditingText: string;
    isCompositing: boolean;
    textNodePaddingX: number;
    textNodePaddingY: number;
    bindEvent(): void;
    onCompositionStart(): void;
    onCompositionUpdate(): void;
    onCompositionEnd(): void;
    handleSetData(data: any): any;
    unbindEvent(): void;
    appendCss(): void;
    initOpt(): void;
    extendQuill(): void;
    extendFont(list?: any[], cover?: boolean): void;
    extendAlign(): void;
    showEditText({ node, rect, isInserting, isFromKeyDown, isFromScale }: {
        node: any;
        rect: any;
        isInserting: any;
        isFromKeyDown: any;
        isFromScale: any;
    }): void;
    onOpenRealtimeRenderOnNodeTextEditConfigUpdate(openRealtimeRenderOnNodeTextEdit: any): void;
    addNodeTextStyleToTextEditNode(node: any): void;
    setQuillContainerMinHeight(minHeight: any): void;
    updateTextEditNode(): void;
    removeTextEditEl(): void;
    getEditText(): any;
    hideEditText(nodes: any): void;
    initQuillEditor(): void;
    getPasteTextStyle(): any;
    formatPasteText(text: any): any;
    selectAll(): void;
    focus(start: any): void;
    formatText(config?: {}, clear?: boolean): void;
    removeFormat(): void;
    formatRangeText(range: any, config?: {}): void;
    formatAllText(config?: {}): void;
    normalStyleToRichTextStyle(style: any): {};
    richTextStyleToNormalStyle(config: any): {};
    isHasRichTextStyle(obj: any): boolean;
    checkNodeHasCustomRichTextStyle(node: any): boolean;
    afterHandleData(): void;
    handleDataToRichTextOnInit(): void;
    transformAllNodesToNormalNode(): void;
    handleDataToRichText(data: any): void;
    beforePluginRemove(): void;
    beforePluginDestroy(): void;
}
declare namespace RichText {
    const instanceName: string;
}
