export default Drag;
declare class Drag extends Base {
    constructor({ mindMap }: {
        mindMap: any;
    });
    autoMove: AutoMove;
    reset(): void;
    isDragging: boolean;
    mousedownNode: any;
    beingDragNodeList: any;
    nodeList: any;
    overlapNode: any;
    prevNode: any;
    nextNode: any;
    drawTransform: any;
    clone: any;
    placeholder: any;
    placeholderWidth: number;
    placeholderHeight: number;
    placeHolderLine: any;
    placeHolderExtraLines: any[];
    offsetX: number;
    offsetY: number;
    isMousedown: boolean;
    mouseDownX: any;
    mouseDownY: any;
    mouseMoveX: any;
    mouseMoveY: any;
    checkDragOffset: number;
    minOffset: number;
    bindEvent(): void;
    onNodeMousedown(node: any, e: any): void;
    onMousemove(e: any): void;
    onMouseup(e: any): Promise<void>;
    checkOverlapNode(): void;
    unBindEvent(): void;
    removeNodeActive(node: any): void;
    onMove(x: any, y: any, e: any): void;
    handleStartMove(): Promise<void>;
    nodeTreeToList(): void;
    createCloneNode(): void;
    removeCloneNode(): void;
    removeExtraLines(): void;
    handleOverlapNode(): void;
    getNewChildNodeDir(node: any): any;
    handleVerticalCheck(node: any, checkList: any, isReverse?: boolean): void;
    handleHorizontalCheck(node: any, checkList: any): void;
    getNodeDistanceToSiblingNode(checkList: any, node: any, nodeRect: any, dir: any): {
        prevBrother: any;
        prevBrotherOffset: number;
        nextBrother: any;
        nextBrotherOffset: number;
    };
    setPlaceholderRect({ x, y, dir, rotate, notRenderLine }: {
        x: any;
        y: any;
        dir: any;
        rotate: any;
        notRenderLine: any;
    }): void;
    checkIsOverlap({ node, dir, prevBrotherOffset, nextBrotherOffset, size, pos, nodeRect }: {
        node: any;
        dir: any;
        prevBrotherOffset: any;
        nextBrotherOffset: any;
        size: any;
        pos: any;
        nodeRect: any;
    }): void;
    handleLogicalStructure(node: any): void;
    handleMindMap(node: any): void;
    handleOrganizationStructure(node: any): void;
    handleCatalogOrganization(node: any): void;
    handleTimeLine(node: any): void;
    handleTimeLine2(node: any): void;
    handleFishbone(node: any): void;
    commonGetNodeCheckList(node: any): any[];
    getNodeRect(node: any): {
        left: any;
        top: any;
        right: any;
        bottom: any;
        originWidth: any;
        originHeight: any;
        originLeft: any;
        originTop: any;
        originBottom: any;
        originRight: any;
    };
    checkIsInBeingDragNodeList(node: any): boolean;
    beforePluginRemove(): void;
    beforePluginDestroy(): void;
}
declare namespace Drag {
    const instanceName: string;
}
import Base from "../layouts/Base";
import AutoMove from "../utils/AutoMove";
