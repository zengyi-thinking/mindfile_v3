export default MindMapNode;
declare class MindMapNode {
    constructor(opt?: {});
    opt: {};
    nodeData: any;
    nodeDataSnapshot: string;
    uid: any;
    mindMap: any;
    renderer: any;
    draw: any;
    nodeDraw: any;
    lineDraw: any;
    style: Style;
    effectiveStyles: {};
    shapeInstance: Shape;
    shapePadding: {
        paddingX: number;
        paddingY: number;
    };
    isRoot: any;
    isGeneralization: any;
    generalizationBelongNode: any;
    layerIndex: any;
    width: any;
    height: any;
    customTextWidth: any;
    _left: any;
    _top: any;
    customLeft: any;
    customTop: any;
    isDrag: boolean;
    parent: any;
    children: any;
    userList: any[];
    group: any;
    shapeNode: any;
    hoverNode: any;
    _customNodeContent: any;
    _imgData: any;
    _iconData: any;
    _textData: any;
    _hyperlinkData: any;
    _tagData: any;
    _noteData: any;
    noteEl: any;
    noteContentIsShow: boolean;
    _attachmentData: any;
    _prefixData: any;
    _postfixData: any;
    _expandBtn: any;
    _lastExpandBtnType: any;
    _showExpandBtn: boolean;
    _openExpandNode: any;
    _closeExpandNode: any;
    _fillExpandNode: any;
    _userListGroup: any;
    _lines: any[];
    _generalizationList: any[];
    _unVisibleRectRegionNode: any;
    _isMouseenter: boolean;
    _customContentAddToNodeAdd: any;
    _rectInfo: {
        textContentWidth: number;
        textContentHeight: number;
        textContentWidthWithoutTag: number;
    };
    _generalizationNodeWidth: number;
    _generalizationNodeHeight: number;
    expandBtnSize: any;
    isMultipleChoice: boolean;
    needLayout: boolean;
    isHide: boolean;
    set left(arg: any);
    get left(): any;
    set top(arg: any);
    get top(): any;
    reset(): void;
    resetWhenDelete(): void;
    handleData(data: any): any;
    createNodeData(recreateTypes: any): void;
    getSize(recreateTypes: any, opt?: {}): boolean;
    bindGroupEvent(): void;
    active(e: any): void;
    deactivate(): void;
    update(forceRender: any): void;
    getNodePosInClient(_left: any, _top: any): {
        left: any;
        top: any;
    };
    checkIsInClient(padding?: number): boolean;
    reRender(recreateTypes: any, opt: any): boolean;
    updateNodeActiveClass(): void;
    updateNodeByActive(active: any): void;
    render(callback?: () => void, forceRender?: boolean, async?: boolean): void;
    removeSelf(): void;
    remove(): void;
    destroy(): void;
    hide(): void;
    show(): void;
    setOpacity(val: any): void;
    hideChildren(): void;
    showChildren(): void;
    startDrag(): void;
    endDrag(): void;
    renderLine(deep?: boolean): void;
    getShape(): string;
    hasCustomPosition(): boolean;
    ancestorHasCustomPosition(): boolean;
    ancestorHasGeneralization(): boolean;
    addChildren(node: any): void;
    styleLine(line: any, childNode: any, enableMarker: any): void;
    getRainbowLineColor(node: any): any;
    removeLine(): void;
    isAncestor(node: any): boolean;
    isParent(node: any): boolean;
    isBrother(node: any): any;
    getIndexInBrothers(): any;
    getPaddingVale(): {
        paddingX: string;
        paddingY: string;
    };
    getStyle(prop: any, root: any): string;
    getSelfStyle(prop: any): any;
    getParentSelfStyle(prop: any): any;
    getSelfInhertStyle(prop: any): any;
    getBorderWidth(): string | 0;
    getData(key: any): any;
    getPureData(removeActiveState?: boolean, removeId?: boolean): any;
    getAncestorNodes(): any[];
    hasCustomStyle(): boolean;
    getRect(): any;
    getRectInSvg(): {
        left: any;
        right: any;
        top: any;
        bottom: any;
        width: number;
        height: number;
    };
    highlight(): void;
    closeHighlight(): void;
    fakeClone(): MindMapNode;
    createSvgTextNode(text?: string): any;
    getSvgObjects(): {
        SVG: any;
        G: any;
        Rect: any;
    };
    checkEnableDragModifyNodeWidth(): any;
    hasCustomWidth(): boolean;
    getChildrenLength(): any;
}
import Style from "./Style";
import Shape from "./Shape";
